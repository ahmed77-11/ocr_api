from flask import Flask, request, jsonify
from flask_cors import CORS

import os
import fitz  # PyMuPDF
from PIL import Image, ImageDraw, ImageFont, ImageEnhance
from google.cloud import vision
from google.api_core.exceptions import GoogleAPICallError
from paddleocr import PaddleOCR
from ultralytics import YOLO
import numpy as np
import re
import difflib
import cv2
from pyzbar.pyzbar import decode
import tempfile
import base64
from io import BytesIO

app = Flask(__name__)
CORS(app,
     resources={r"/api/*": {
         "origins": "http://localhost:5173",
         "methods": ["POST", "GET", "PUT", "DELETE"],
         "allow_headers": ["Content-Type", "Authorization"]
}})


# === Global Configuration ===
REFERENCE_WIDTH = 836
REFERENCE_HEIGHT = 540
MARGIN = 20

# Define relative regions
regions_rel = {
    "traite_num": (650 / 836, 70 / 540, 800 / 836, 90 / 540),
    "amount_digits": (623 / 836, 120 / 540, 821 / 836, 155 / 540),
    "date_due": (270 / 836, 270 / 540, 402 / 836, 313 / 540),
    "date_created": (145 / 836, 270 / 540, 270 / 836, 310 / 540),
    "date_due1": (230 / 836, 70 / 540, 385 / 836, 105 / 540),
    "date_created1": (402 / 836, 80 / 540, 550 / 836, 95 / 540),
    "place_created": (11 / 836, 275 / 540, 146 / 836, 310 / 540),
    "place_created1": (402 / 836, 50 / 540, 540 / 836, 70 / 540),
    "rib": (231 / 836, 110 / 540, 600 / 836, 161 / 540),
    "drawer_name": (13 / 836, 169 / 540, 210 / 836, 203 / 540),
    "amount_words": (20 / 836, 222 / 540, 790 / 836, 260 / 540),
    "company_name": (226 / 836, 200 / 540, 610 / 836, 225 / 540),
    "payer_name_address": (362 / 836, 352 / 540, 548 / 836, 450 / 540),
    "bank": (555 / 836, 320 / 540, 820 / 836, 380 / 540),
    "signature_tireur": (560 / 836, 385 / 540, 815 / 836, 445 / 540),
}

# Load YOLO model (adjust path as needed)
signature_model = YOLO("./runs/medfactor/stamp-detection-ydrxo/exp/weights/best.pt")


# === Helper Functions ===
def setup_google_environment():
    """Setup Google Cloud Vision API credentials"""
    creds_path = "C:/Users/mghir/Desktop/vision-458206-e466edc966f8.json"
    if not os.path.exists(creds_path):
        raise FileNotFoundError(f"Credentials file not found at: {creds_path}")
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = creds_path


def process_pdf_to_image(pdf_file):
    """Convert PDF first page to enhanced image"""
    # Read file content into memory
    pdf_content = pdf_file.read()

    # Create temporary file and write content
    tmp_file_path = None
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file_path = tmp_file.name
            tmp_file.write(pdf_content)
            tmp_file.flush()

        # Load PDF and extract first page
        doc = fitz.open(tmp_file_path)
        page = doc[0]
        pix = page.get_pixmap(dpi=300)
        image = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
        doc.close()

    finally:
        # Clean up temp file
        if tmp_file_path and os.path.exists(tmp_file_path):
            try:
                os.unlink(tmp_file_path)
            except (OSError, PermissionError):
                # If we can't delete immediately, try again after a short delay
                import time
                time.sleep(0.1)
                try:
                    os.unlink(tmp_file_path)
                except (OSError, PermissionError):
                    pass  # File will be cleaned up by system eventually

    # Enhance image
    img_w, img_h = image.size
    image = image.convert("L")
    image = ImageEnhance.Contrast(image).enhance(2.5)
    image = ImageEnhance.Sharpness(image).enhance(3.0)
    image = image.convert("RGB")

    return image, img_w, img_h


def calculate_regions(img_w, img_h):
    """Calculate pixel regions from relative coordinates"""
    regions = {}
    for key, (x0_rel, y0_rel, x1_rel, y1_rel) in regions_rel.items():
        x0 = int(x0_rel * img_w) - MARGIN
        y0 = int(y0_rel * img_h) - MARGIN
        x1 = int(x1_rel * img_w) + MARGIN
        y1 = int(y1_rel * img_h) + MARGIN
        regions[key] = (
            max(0, x0), max(0, y0),
            min(img_w, x1), min(img_h, y1)
        )
    return regions


def point_in_rect(pt, rect):
    """Check if point is inside rectangle"""
    x, y = pt
    x0, y0, x1, y1 = rect
    return x0 <= x <= x1 and y0 <= y <= y1


def clean_text(text, field):
    """Clean extracted text based on field type"""
    text = text.strip()
    text = re.sub(r'\s+', ' ', text)
    text = re.sub(r'[^\x20-\x7E]+', '', text)

    if field == "amount_digits":
        text = re.sub(r'[^\d.,]', '', text)
    elif field in ["place_created", "place_created1"]:
        text = re.sub(r'\b[aA]\b', '', text)
    elif field == "company_name":
        text = re.sub(r'\b(Oui|Non)\b', '', text, flags=re.IGNORECASE)
        text = re.sub(r'\b(y1gas|py1gas)\b', '', text, flags=re.IGNORECASE)
        text = re.sub(r'[^a-zA-Z0-9\s\-\&]', '', text)
        text = re.sub(r'\s+', ' ', text).strip()
    elif field in ["date_due", "date_created", "date_due1", "date_created1"]:
        text = re.sub(r'^\s*(Le|A)\s*', '', text, flags=re.IGNORECASE)
        # Updated patterns with flexible spacing around separators
        patterns = [
            r'\b\d{1,2}\s*[-/]\s*\d{1,2}\s*[-/]\s*\d{2,4}\b',
            r'\b\d{4}\s*[-/]\s*\d{1,2}\s*[-/]\s*\d{1,2}\b',
            r'\b\d{1,2}\s+[A-Za-zéèêîû]+\s+\d{4}\b',
            r'\b\d{1,2}\s*[-/]\s*[A-Za-z]{3,}\s*[-/]\s*\d{2,4}\b',
        ]
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                text = match.group(0)
                break
    elif field == "traite_num":
        text = re.sub(r'\D', '', text)
    elif field == "bank":
        text = re.sub(r'\b(Domiciliation)\b', '', text, flags=re.IGNORECASE)
    elif field == "amount_words":
        valid_words = {
            'zéro', 'un', 'deux', 'trois', 'quatre', 'cinq', 'six', 'sept', 'huit', 'neuf',
            'dix', 'onze', 'douze', 'treize', 'quatorze', 'quinze', 'seize', 'vingt', 'trente',
            'quarante', 'cinquante', 'soixante', 'soixante-dix', 'quatre-vingt', 'quatre-vingts',
            'quatre-vingt-dix', 'cent', 'cents', 'mille', 'million', 'millions', 'milliard', 'milliards',
            'et', 'dinars', 'dinar'
        }
        text = text.lower()
        text = re.sub(r'\d+', '', text)
        text = re.sub(r'[^a-zàâçéèêëîïôûùüÿñæœ\s-]', '', text)
        words = text.split()
        filtered = [difflib.get_close_matches(w, valid_words, n=1, cutoff=0.8)[0]
                    for w in words if difflib.get_close_matches(w, valid_words, n=1, cutoff=0.8)]
        text = ' '.join(filtered)
    elif field == "rib":
        text = re.sub(r'[^\d]', '', text)

    return text


def better_date(d1, d2):
    """Choose better date between two candidates"""

    def score(date):
        penalty = 1 if re.match(r'^\D+', date) else 0
        return len(re.findall(r'[^a-zA-Z0-9]', date)) + penalty
    if not d1 and d2:
        return d2
    if d1 and not d2:
        return d1
    if not d1 and not d2:
        return ""
    score1 = len(re.findall(r'[^a-zA-Z0-9]', d1))
    score2 = len(re.findall(r'[^a-zA-Z0-9]', d2))
    if score1 < score2:
        return d1
    elif score2 < score1:
        return d2
    return d1 if len(d1) <= len(d2) else d2


def looks_like_place(text):
    """Check if text looks like a place name"""
    keywords = ['tunis', 'paris', 'lyon', 'marseille', 'cairo', 'algiers', 'casablanca', 'rabat', "sfax"]
    if any(k in text.lower() for k in keywords):
        return True
    return bool(re.match(r'^[a-zA-Z\s\-\.]+$', text)) and len(text) > 3


def post_process_fields(cleaned):
    """Post-process extracted fields"""
    final_fields = {}
    final_fields["place_created"] = cleaned["place_created1"] if looks_like_place(cleaned["place_created1"]) else \
    cleaned["place_created"]
    final_fields["date_due"] = better_date(cleaned["date_due"], cleaned["date_due1"])
    final_fields["date_created"] = better_date(cleaned["date_created"], cleaned["date_created1"])
    for k in cleaned:
        if k not in ["place_created", "place_created1", "date_due", "date_due1", "date_created", "date_created1"]:
            final_fields[k] = cleaned[k]
    return final_fields


def detect_signature_and_barcodes(image):
    """Detect signatures using YOLO and barcodes using pyzbar"""
    img_for_detection = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

    # YOLO signature detection
    results = signature_model(img_for_detection)


    signature_detected = False
    signature_box = None

    for r in results:
        for box in r.boxes:
            signature_detected = True
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            signature_box = (x1, y1, x2, y2)
            break

    # Barcode detection
    barcodes = decode(img_for_detection)
    barcode_data_list = [barcode.data.decode('utf-8') for barcode in barcodes]

    return signature_detected, signature_box, barcode_data_list


def validate_barcode_traite(barcode_list, traite_num):
    """Check if any barcode matches the traite number"""
    if not barcode_list or not traite_num:
        return False

    # Clean traite_num for comparison
    clean_traite = re.sub(r'\D', '', traite_num)

    for barcode in barcode_list:
        clean_barcode = re.sub(r'\D', '', barcode)
        if clean_barcode == clean_traite:
            return True
    return False


# === API Endpoint 1: Google Vision API ===
@app.route('/api/ocr/google', methods=['POST'])
def ocr_google_vision():
    """OCR using Google Vision API"""
    try:
        # Setup Google credentials
        setup_google_environment()

        # Check if file is uploaded
        if 'file' not in request.files:
            return jsonify({'error': 'No file uploaded'}), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': 'No file selected'}), 400

        # Process PDF to image
        image, img_w, img_h = process_pdf_to_image(file)
        regions = calculate_regions(img_w, img_h)

        # Save image for OCR
        tmp_image_path = None
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_image:
                tmp_image_path = tmp_image.name
                image.save(tmp_image_path)

            # OCR with Google Vision API
            client = vision.ImageAnnotatorClient()
            with open(tmp_image_path, "rb") as image_file:
                content = image_file.read()
            vision_image = vision.Image(content=content)
            response = client.text_detection(vision_image)

            if response.error.message:
                raise GoogleAPICallError(response.error.message)

            ocr_texts = response.text_annotations

        finally:
            # Clean up temp file
            if tmp_image_path and os.path.exists(tmp_image_path):
                try:
                    os.unlink(tmp_image_path)
                except (OSError, PermissionError):
                    import time
                    time.sleep(0.1)
                    try:
                        os.unlink(tmp_image_path)
                    except (OSError, PermissionError):
                        pass

        # Extract text mapped to regions
        extracted = {field: "" for field in regions}
        for annotation in ocr_texts[1:]:  # skip full text at index 0
            vertices = annotation.bounding_poly.vertices
            cx = sum(v.x for v in vertices) / 4
            cy = sum(v.y for v in vertices) / 4
            for field, rect in regions.items():
                if point_in_rect((cx, cy), rect):
                    extracted[field] += annotation.description + " "

        # Clean extracted text
        cleaned = {k: clean_text(v, k) for k, v in extracted.items()}
        final_fields = post_process_fields(cleaned)

        # Detect signatures and barcodes
        signature_detected, signature_box, barcode_data_list = detect_signature_and_barcodes(image)
        final_fields["signature_detected"] = signature_detected
        final_fields["barcodes"] = barcode_data_list

        # Validate barcode against traite number
        barcode_matches_traite = validate_barcode_traite(barcode_data_list, final_fields.get("traite_num", ""))
        final_fields["barcode_matches_traite"] = barcode_matches_traite

        return jsonify({
            'success': True,
            'ocr_method': 'Google Vision API',
            'extracted_data': final_fields,
            'signature_detected': signature_detected,
            'signature_box': signature_box,
            'barcodes_detected': barcode_data_list,
            'barcode_validates_traite': barcode_matches_traite
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500


# === API Endpoint 2: PaddleOCR ===
@app.route('/api/ocr/paddle', methods=['POST'])
def ocr_paddle():
    """OCR using PaddleOCR"""
    try:
        # Check if file is uploaded
        if 'file' not in request.files:
            return jsonify({'error': 'No file uploaded'}), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': 'No file selected'}), 400

        # Process PDF to image
        image, img_w, img_h = process_pdf_to_image(file)
        regions = calculate_regions(img_w, img_h)

        # OCR with PaddleOCR
        ocr = PaddleOCR(use_angle_cls=True, lang='fr')
        np_image = np.array(image)
        ocr_result = ocr.ocr(np_image, cls=True)[0]

        # Extract text mapped to regions
        extracted = {field: "" for field in regions}
        for line in ocr_result:
            box, (text, score) = line
            cx = sum(p[0] for p in box) / 4
            cy = sum(p[1] for p in box) / 4
            for field, rect in regions.items():
                if point_in_rect((cx, cy), rect):
                    extracted[field] += text + " "

        # Clean extracted text
        cleaned = {k: clean_text(v, k) for k, v in extracted.items()}
        final_fields = post_process_fields(cleaned)
        # for i in final_fields:
        #     print("done")
        #     print(final_fields[i])

        # Detect signatures and barcodes
        signature_detected, signature_box, barcode_data_list = detect_signature_and_barcodes(image)
        final_fields["signature_detected"] = signature_detected
        final_fields["barcodes"] = barcode_data_list

        # Validate barcode against traite number
        barcode_matches_traite = validate_barcode_traite(barcode_data_list, final_fields.get("traite_num", ""))
        final_fields["barcode_matches_traite"] = barcode_matches_traite

        return jsonify({
            'success': True,
            'ocr_method': 'PaddleOCR',
            'extracted_data': final_fields,
            'signature_detected': signature_detected,
            'signature_box': signature_box,
            'barcodes_detected': barcode_data_list,
            'barcode_validates_traite': barcode_matches_traite
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500


# === Health Check Endpoint ===
@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'available_endpoints': [
            '/api/ocr/google - POST - OCR using Google Vision API',
            '/api/ocr/paddle - POST - OCR using PaddleOCR',
            '/api/health - GET - Health check'
        ]
    })


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)